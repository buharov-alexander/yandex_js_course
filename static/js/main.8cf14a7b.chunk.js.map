{"version":3,"sources":["resources/users.yaml","resources/tasks.yaml","app/actions/actionTypes.js","app/store/usersReducer.js","app/store/tasksReducer.js","app/store/rootReducer.js","app/store/configureStore.js","app/actions/usersActions.js","app/actions/tasksActions.js","app/task-table/TaskTableRow.js","app/task-table/TaskTable.js","app/task-table/TaskTableContainer.js","app/task-table/TaskTablePage.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","LOAD_USERS","LOAD_TASKS","LOAD_USER_TASKS","initialState","users","Map","weeks","List","combineReducers","state","action","type","payload","map","username","Object","assign","set","tasks","index","name","configureStore","createStore","rootReducer","compose","applyMiddleware","thunk","loadUsers","dispatch","fetch","then","response","text","usernames","yaml","safeLoad","forEach","json","data","loadTasksForUser","loadTasks","useStyles","makeStyles","cell","padding","textAlign","TaskTableRow","results","classes","TableRow","TableCell","component","scope","task","className","key","taskName","result","theme","root","width","marginTop","spacing","overflowX","table","minWidth","border","TaskTable","reduce","acc","week","push","userResults","keySeq","toList","completedTasks","get","find","ct","Paper","Table","TableHead","colSpan","length","align","TableBody","TaskTableContainer","props","actions","this","PureComponent","connect","title","TaskTablePage","Container","Typography","variant","paragraph","store","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8cf14a7b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/users.8e429045.yaml\";","module.exports = __webpack_public_path__ + \"static/media/tasks.4906365e.yaml\";","export const LOAD_USERS = 'LOAD_USERS';\nexport const LOAD_TASKS = 'LOAD_TASKS';\nexport const LOAD_USER_TASKS = 'LOAD_USER_TASKS';\n","import { Map } from 'immutable';\n\nimport {\n  LOAD_USERS,\n  LOAD_USER_TASKS,\n} from 'app/actions/actionTypes';\n\nconst initialState = {\n  users: new Map(),\n};\n\nexport default function movieReducer(state = initialState, action) {\n  switch (action.type) {\n    case LOAD_USERS: {\n      const users = new Map(action.payload.map(username => [username, null]));\n      return Object.assign({}, state, { users });\n    }\n    case LOAD_USER_TASKS: {\n      const users = state.users.set(action.payload.username, action.payload.tasks);\n      return Object.assign({}, state, { users });\n    }\n    default:\n      return state;\n  }\n}\n","import { List } from 'immutable';\n\nimport {\n  LOAD_TASKS,\n} from 'app/actions/actionTypes';\n\nconst initialState = {\n  weeks: new List(),\n};\n\nexport default function movieReducer(state = initialState, action) {\n  switch (action.type) {\n    case LOAD_TASKS: {\n      const weeks = action.payload.map((tasks, index) => ({ name: `Week ${index + 1}`, tasks }));\n      return Object.assign({}, state, { weeks: new List(weeks) });\n    }\n    default:\n      return state;\n  }\n}\n","import { combineReducers } from 'redux';\n\nimport usersReducer from './usersReducer';\nimport tasksReducer from './tasksReducer';\n\nexport default combineReducers({\n  users: usersReducer,\n  tasks: tasksReducer,\n});\n","import { createStore, compose, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\n\nimport rootReducer from './rootReducer';\n\nconst configureStore = () => createStore(\n  rootReducer,\n  compose(\n    applyMiddleware(\n      thunk,\n    ),\n    // eslint-disable-next-line no-undef, no-underscore-dangle\n    // window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__(),\n  ),\n);\n\nexport default configureStore;\n","import yaml from 'js-yaml';\nimport users from 'resources/users.yaml';\n\nimport {\n  LOAD_USERS,\n  LOAD_USER_TASKS,\n} from './actionTypes';\n\nconst loadTasksForUser = (username, dispatch) => {\n  fetch(`https://www.codewars.com/api/v1/users/${username}/code-challenges/completed?access_key=m2cqV5zGM8vvxkBvWznq`)\n    .then(response => response.json())\n    .then(response => dispatch({ type: LOAD_USER_TASKS, payload: { username, tasks: response.data } }));\n};\n\nconst loadUsers = () => (dispatch) => {\n  fetch(users)\n    .then(response => response.text())\n    .then((response) => {\n      const usernames = yaml.safeLoad(response);\n      dispatch({ type: LOAD_USERS, payload: usernames });\n      return usernames;\n    }).then(usernames => usernames.forEach(username => loadTasksForUser(username, dispatch)));\n};\n\nexport default loadUsers;\n","import yaml from 'js-yaml';\nimport tasks from 'resources/tasks.yaml';\n\nimport {\n  LOAD_TASKS,\n} from './actionTypes';\n\nconst loadTasks = () => (dispatch) => {\n  fetch(tasks)\n    .then(response => response.text())\n    .then(response => dispatch({ type: LOAD_TASKS, payload: yaml.safeLoad(response) }));\n};\n\nexport default loadTasks;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport { makeStyles } from '@material-ui/core/styles';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableCell from '@material-ui/core/TableCell';\n\nconst useStyles = makeStyles(() => ({\n  cell: {\n    padding: '15px',\n    textAlign: 'center',\n  },\n}));\n\nconst TaskTableRow = ({ username, results }) => {\n  const classes = useStyles();\n\n  return (\n    <TableRow>\n      <TableCell component=\"th\" scope=\"row\">\n        {username}\n      </TableCell>\n      {results.map(task => (\n        <TableCell className={classes.cell} key={task.taskName}>\n          {task.result ? '+' : null}\n        </TableCell>\n      ))}\n    </TableRow>\n  );\n};\n\nTaskTableRow.propTypes = {\n  username: PropTypes.string.isRequired,\n  results: ImmutablePropTypes.list.isRequired,\n};\n\nexport default TaskTableRow;\n","import React from 'react';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport { List } from 'immutable';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\n\nimport TaskTableRow from './TaskTableRow';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    width: '100%',\n    marginTop: theme.spacing(3),\n    overflowX: 'auto',\n  },\n  table: {\n    minWidth: 650,\n  },\n  cell: {\n    border: '1px solid black',\n    padding: '15px',\n  },\n}));\n\nconst TaskTable = ({ users, weeks }) => {\n  const classes = useStyles();\n  const tasks = weeks.reduce((acc, week) => acc.push(...week.tasks), new List());\n\n  const userResults = users.keySeq().toList().map((username) => {\n    const completedTasks = users.get(username) || new List();\n    const results = tasks.map(task => ({ taskName: task, result: completedTasks.find(ct => ct.name === task) }));\n    return { username, results };\n  });\n\n  return (\n    <Paper className={classes.root}>\n      <Table className={classes.table}>\n        <TableHead>\n          <TableRow>\n            <TableCell />\n            {weeks.map(week => (\n              <TableCell className={classes.cell} key={week.name} colSpan={week.tasks.length} align=\"center\">\n                {week.name}\n              </TableCell>\n            ))}\n          </TableRow>\n          <TableRow>\n            <TableCell>Name</TableCell>\n            {tasks.map(task => (\n              <TableCell className={classes.cell} key={task} align=\"center\">\n                {task}\n              </TableCell>\n            ))}\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {userResults.map(({ username, results }) => (\n            <TaskTableRow\n              key={username}\n              username={username}\n              results={results}\n            />\n          ))}\n        </TableBody>\n      </Table>\n    </Paper>\n  );\n};\n\nTaskTable.propTypes = {\n  users: ImmutablePropTypes.map.isRequired,\n  weeks: ImmutablePropTypes.list.isRequired,\n};\n\nexport default TaskTable;\n","import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport loadUsers from 'app/actions/usersActions';\nimport loadTasks from 'app/actions/tasksActions';\nimport TaskTable from './TaskTable';\n\nclass TaskTableContainer extends PureComponent {\n  static propTypes = {\n    actions: PropTypes.shape({\n      loadUsers: PropTypes.func,\n      loadTasks: PropTypes.func,\n    }).isRequired,\n  }\n\n  constructor(props) {\n    super(props);\n    props.actions.loadUsers();\n    props.actions.loadTasks();\n  }\n\n  render() {\n    return <TaskTable {...this.props} />;\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    users: state.users.users,\n    weeks: state.tasks.weeks,\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    actions: {\n      loadUsers: () => dispatch(loadUsers()),\n      loadTasks: () => dispatch(loadTasks()),\n    },\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TaskTableContainer);\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\nimport Typography from '@material-ui/core/Typography';\n\nimport TaskTableContainer from './TaskTableContainer';\n\nconst useStyles = makeStyles(theme => ({\n  title: {\n    marginTop: theme.spacing(3),\n  },\n}));\n\nexport default function TaskTablePage() {\n  const classes = useStyles();\n\n  return (\n    <Container>\n      <Typography className={classes.title} variant=\"h3\" paragraph>\n        Yandex JS course 2019\n      </Typography>\n      <TaskTableContainer />\n    </Container>\n  );\n}\n","\nimport React from 'react';\nimport { Provider } from 'react-redux';\n\nimport './App.css';\nimport configureStore from 'app/store/configureStore';\nimport TaskTablePage from 'app/task-table/TaskTablePage';\n\nconst store = configureStore();\n\nconst App = () => (\n  <Provider store={store}>\n    <TaskTablePage />\n  </Provider>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}